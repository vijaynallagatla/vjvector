name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.25]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: |
        if [ "$(go env CGO_ENABLED)" = "1" ]; then
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        else
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...
        fi
      env:
        CGO_ENABLED: 1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      run: |
        chmod +x ./tools/run-lint.sh
        ./tools/run-lint.sh run --timeout=5m

  security:
    name: Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run CodeQL security analysis
      uses: github/codeql-action/init@v2
      with:
        languages: go

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.25]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Build
      run: |
        go build -v -ldflags="-s -w" -o bin/vjvector ./cmd/vjvector
      env:
        CGO_ENABLED: 1

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vjvector-${{ matrix.os }}-${{ matrix.go-version }}
        path: bin/

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: vjvector:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
